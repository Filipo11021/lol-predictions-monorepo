// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // discord user id
  id String @id @map("_id")

  username String
  avatar   String?

  notifications Boolean @default(true)

  votes Vote[]

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  // team code
  code  String @id @map("_id")
  name  String
  image String

  games   Game[]   @relation(fields: [gameIds], references: [id])
  gameIds String[]

  votes    Vote[]
  wonGames Game[] @relation(name: "winner")

  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId TOURNAMENT_ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  // created from gameId + userId
  id String @id @map("_id")

  team     Team   @relation(fields: [teamCode], references: [code])
  teamCode String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String

  score String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
}

model Game {
  // riot game id
  id String @id @map("_id")

  gameDay   GameDay @relation(fields: [gameDayId], references: [id])
  gameDayId String

  teamCodes String[]
  teams     Team[]   @relation(fields: [teamCodes], references: [code])

  voters Vote[]

  startTime DateTime

  type MatchType

  winner     Team?   @relation(fields: [winnerCode], references: [code], name: "winner")
  winnerCode String?
  score      String?

  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId TOURNAMENT_ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MatchType {
  BO1
  BO3
  BO5
}

model GameDay {
  // generated in app
  id String @id @map("_id")

  games Game[]

  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId TOURNAMENT_ID

  firstMatchStart DateTime

  current Current?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Workspace {
  MAIN
}

model Current {
  id Workspace @id @default(MAIN) @map("_id")

  gameDay   GameDay? @relation(fields: [gameDayId], references: [id])
  gameDayId String?  @unique

  messageId String? @unique

  ctournament  Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId TOURNAMENT_ID
}

model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  messageId String?
  title     Translation

  availableOptions String[]
  correctOptions   String[]

  points Float @default(1)

  type     QuestionType
  category QuestionCategory

  answers Answer[]

  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId TOURNAMENT_ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  BONUS_QUESTION
  CRYSTAL_BALL
}

enum QuestionCategory {
  EVENT
  PLAYERS
  CHAMPIONS
  TEAMS
}

model Answer {
  id String @id @default(cuid()) @map("_id")

  selectedOptions String[]

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([questionId, userId])
}

enum TOURNAMENT_ID {
  MSI_2024
}

model Tournament {
  id TOURNAMENT_ID @id @map("_id")

  gameDays  GameDay[]
  games     Game[]
  questions Question[]
  current   Current[]
  teams     Team[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Translation {
  en String
  pl String
}
